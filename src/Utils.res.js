// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";
import * as Core__Result from "@rescript/core/src/Core__Result.res.js";

async function await_(res) {
  if (res.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: await res._0
          };
  } else {
    return {
            TAG: "Error",
            _0: res._0
          };
  }
}

function toOption(result) {
  return Core__Result.mapOr(result, undefined, (function (x) {
                return Caml_option.some(x);
              }));
}

function flatten(result) {
  return Core__Result.flatMap(result, (function (x) {
                return x;
              }));
}

var Result = {
  getExn: Core__Result.getExn,
  mapOr: Core__Result.mapOr,
  mapWithDefault: Core__Result.mapWithDefault,
  map: Core__Result.map,
  flatMap: Core__Result.flatMap,
  getOr: Core__Result.getOr,
  getWithDefault: Core__Result.getWithDefault,
  isOk: Core__Result.isOk,
  isError: Core__Result.isError,
  equal: Core__Result.equal,
  compare: Core__Result.compare,
  forEach: Core__Result.forEach,
  mapError: Core__Result.mapError,
  await_: await_,
  toOption: toOption,
  flatten: flatten
};

async function await_$1(option) {
  if (option !== undefined) {
    return Caml_option.some(await Caml_option.valFromOption(option));
  }
  
}

function flatten$1(option) {
  return Core__Option.flatMap(option, (function (x) {
                return x;
              }));
}

function flattenResult(option) {
  return Core__Option.flatMap(option, toOption);
}

var $$Option = {
  filter: Core__Option.filter,
  forEach: Core__Option.forEach,
  getExn: Core__Option.getExn,
  mapOr: Core__Option.mapOr,
  mapWithDefault: Core__Option.mapWithDefault,
  map: Core__Option.map,
  flatMap: Core__Option.flatMap,
  getOr: Core__Option.getOr,
  getWithDefault: Core__Option.getWithDefault,
  orElse: Core__Option.orElse,
  isSome: Core__Option.isSome,
  isNone: Core__Option.isNone,
  equal: Core__Option.equal,
  compare: Core__Option.compare,
  await_: await_$1,
  flatten: flatten$1,
  flattenResult: flattenResult
};

function useIsServer() {
  var match = React.useState(function () {
        return true;
      });
  var setIsServer = match[1];
  React.useLayoutEffect((function () {
          setIsServer(function (param) {
                return false;
              });
        }), [setIsServer]);
  return match[0];
}

export {
  Result ,
  $$Option ,
  useIsServer ,
}
/* react Not a pure module */
