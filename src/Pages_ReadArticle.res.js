// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Db from "./Db.res.js";
import * as Env from "./Env.res.js";
import * as Core__Int from "@rescript/core/src/Core__Int.res.js";
import * as Components_Stat from "./Components_Stat.res.js";
import * as Components_Time from "./Components_Time.res.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as Pages_ReadArticle__sql from "./Pages_ReadArticle__sql.res.js";
import * as Components_ArticleViewer from "./Components_ArticleViewer.res.js";

function query(aid) {
  return async function (client) {
    var article = await Pages_ReadArticle__sql.GetArticle.one(client, {
          id: aid
        });
    var likes = await Pages_ReadArticle__sql.GetLikes.many(client, {
          id: aid
        });
    var files = await Pages_ReadArticle__sql.GetFiles.many(client, {
          id: aid
        });
    return [
            article,
            likes,
            files
          ];
  };
}

async function $$default(param) {
  var aid = param.params.aid;
  var aid$1 = Core__Int.fromString(aid, undefined);
  if (aid$1 === undefined) {
    return notFound();
  }
  var result = await Db.tx(query(aid$1));
  if (result.TAG === "Ok") {
    var match = result._0;
    var article = match[0];
    if (article !== undefined) {
      return JsxRuntime.jsxs("main", {
                  children: [
                    JsxRuntime.jsxs("header", {
                          children: [
                            JsxRuntime.jsx("h1", {
                                  children: article.title,
                                  className: "font-bold text-3xl"
                                }),
                            JsxRuntime.jsxs("p", {
                                  children: [
                                    article.authorName + ", ",
                                    JsxRuntime.jsx(Components_Time.make, {
                                          children: article.firstPublishedAt
                                        }),
                                    article.firstPublishedAt !== article.lastPublishedAt ? JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                            children: [
                                              " (개정: ",
                                              JsxRuntime.jsx(Components_Time.make, {
                                                    children: article.lastPublishedAt
                                                  }),
                                              ")"
                                            ]
                                          }) : null
                                  ],
                                  className: "text-xs"
                                }),
                            JsxRuntime.jsxs("p", {
                                  children: [
                                    JsxRuntime.jsx(Components_Stat.make, {
                                          icon: "/icons/visibility.svg",
                                          alt: "조회수",
                                          count: article.viewsCount,
                                          size: "size-4"
                                        }),
                                    JsxRuntime.jsx(Components_Stat.make, {
                                          icon: "/icons/favorite.svg",
                                          alt: "좋아요",
                                          count: match[1].length,
                                          size: "size-4"
                                        })
                                  ],
                                  className: "text-xs"
                                })
                          ]
                        }),
                    JsxRuntime.jsx(Components_ArticleViewer.make, {
                          article: article,
                          files: match[2],
                          fileSuffix: Env.staticUrl + "/" + article.editionId.toString()
                        })
                  ]
                });
    } else {
      return notFound();
    }
  }
  throw result._0;
}

var Pages_ReadArticle$default = $$default;

var $$default$1 = Pages_ReadArticle$default;

export {
  query ,
  $$default$1 as default,
}
/* Db Not a pure module */
