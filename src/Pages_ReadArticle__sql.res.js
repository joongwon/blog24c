// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Option from "@rescript/core/src/Core__Option.res.js";
import * as RescriptCore from "@rescript/core/src/RescriptCore.res.js";
import * as PgtypedRescriptRuntime from "pgtyped-rescript-runtime";

var getFilesIR = {"usedParamSet":{"id":true},"params":[{"name":"id","required":true,"transform":{"type":"scalar"},"locs":[{"a":111,"b":114}]}],"statement":"SELECT id, name\n        FROM files\n        WHERE edition_id = (SELECT id FROM last_editions WHERE article_id = :id!)"};

var query = new PgtypedRescriptRuntime.PreparedQuery(getFilesIR);

function many(client, params) {
  return query.run(params, client);
}

async function one(client, params) {
  var match = await query.run(params, client);
  if (match.length !== 1) {
    return ;
  } else {
    return match[0];
  }
}

async function expectOne(client, params, errorMessage) {
  var match = await query.run(params, client);
  if (match.length !== 1) {
    return RescriptCore.panic(Core__Option.getOr(errorMessage, "More or less than one item was returned"));
  } else {
    return match[0];
  }
}

async function execute(client, params) {
  await query.run(params, client);
}

var GetFiles = {
  many: many,
  one: one,
  expectOne: expectOne,
  execute: execute
};

function getFiles(params, client) {
  return query.run(params, client);
}

var getLikesIR = {"usedParamSet":{"id":true},"params":[{"name":"id","required":true,"transform":{"type":"scalar"},"locs":[{"a":120,"b":123}]}],"statement":"SELECT user_id AS id, name\n        FROM likes\n        JOIN users ON likes.user_id = users.id\n        WHERE article_id = :id!\n        ORDER BY created_at ASC"};

var query$1 = new PgtypedRescriptRuntime.PreparedQuery(getLikesIR);

function many$1(client, params) {
  return query$1.run(params, client);
}

async function one$1(client, params) {
  var match = await query$1.run(params, client);
  if (match.length !== 1) {
    return ;
  } else {
    return match[0];
  }
}

async function expectOne$1(client, params, errorMessage) {
  var match = await query$1.run(params, client);
  if (match.length !== 1) {
    return RescriptCore.panic(Core__Option.getOr(errorMessage, "More or less than one item was returned"));
  } else {
    return match[0];
  }
}

async function execute$1(client, params) {
  await query$1.run(params, client);
}

var GetLikes = {
  many: many$1,
  one: one$1,
  expectOne: expectOne$1,
  execute: execute$1
};

function getLikes(params, client) {
  return query$1.run(params, client);
}

var getArticleIR = {"usedParamSet":{"id":true},"params":[{"name":"id","required":true,"transform":{"type":"scalar"},"locs":[{"a":489,"b":492}]}],"statement":"SELECT a.id, title AS \"title!\", content AS \"content!\", name AS \"authorName!\", views_count AS \"viewsCount!\", e.id AS \"editionId!\",\n        first_published_at AS \"firstPublishedAt!\", last_published_at AS \"lastPublishedAt!\",\n        (SELECT COUNT(*) FROM editions WHERE article_id = a.id) AS \"editionsCount\"\n        FROM last_editions e\n        JOIN articles a ON e.article_id = a.id\n        JOIN users u ON a.author_id = u.id\n        JOIN article_stats s ON a.id = s.id\n        WHERE a.id = :id!"};

var query$2 = new PgtypedRescriptRuntime.PreparedQuery(getArticleIR);

function many$2(client, params) {
  return query$2.run(params, client);
}

async function one$2(client, params) {
  var match = await query$2.run(params, client);
  if (match.length !== 1) {
    return ;
  } else {
    return match[0];
  }
}

async function expectOne$2(client, params, errorMessage) {
  var match = await query$2.run(params, client);
  if (match.length !== 1) {
    return RescriptCore.panic(Core__Option.getOr(errorMessage, "More or less than one item was returned"));
  } else {
    return match[0];
  }
}

async function execute$2(client, params) {
  await query$2.run(params, client);
}

var GetArticle = {
  many: many$2,
  one: one$2,
  expectOne: expectOne$2,
  execute: execute$2
};

function getArticle(params, client) {
  return query$2.run(params, client);
}

export {
  GetFiles ,
  getFiles ,
  GetLikes ,
  getLikes ,
  GetArticle ,
  getArticle ,
}
/* query Not a pure module */
