'use client';
// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Actions from "./Actions.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

var state = {
  contents: "Loading"
};

var listeners = new Set();

function use() {
  return React.useSyncExternalStore((function (listener) {
                listeners.add(listener);
                return function () {
                  listeners.delete(listener);
                };
              }), (function () {
                return state.contents;
              }));
}

var timeout = {
  contents: undefined
};

function update(newState) {
  state.contents = newState;
  Core__Option.map(timeout.contents, (function (prim) {
          clearTimeout(prim);
        }));
  var match = state.contents;
  if (typeof match !== "object") {
    match === "Loading";
  } else {
    timeout.contents = Caml_option.some(setTimeout((function () {
                var match = state.contents;
                if (typeof match !== "object") {
                  return ;
                }
                Actions.refresh().then(function (res) {
                      var newState = res !== undefined ? ({
                            TAG: "LoggedIn",
                            _0: res
                          }) : "Anon";
                      update(newState);
                    });
              }), 3000000));
  }
  listeners.forEach(function (listener) {
        listener();
      });
}

var initTokenCalled = {
  contents: false
};

async function initToken() {
  if (initTokenCalled.contents) {
    return ;
  }
  initTokenCalled.contents = true;
  var pathname = window.location.pathname;
  if (pathname === "/login/naver/callback") {
    state.contents = "Anon";
    return ;
  }
  var res = await Actions.refresh();
  if (res !== undefined) {
    state.contents = {
      TAG: "LoggedIn",
      _0: res
    };
  } else {
    state.contents = "Anon";
  }
}

export {
  state ,
  listeners ,
  use ,
  timeout ,
  update ,
  initTokenCalled ,
  initToken ,
}
/* listeners Not a pure module */
