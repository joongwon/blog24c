'use client'
// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Auth from "../Auth.res.js";
import * as React from "react";
import * as Actions from "../Actions.res.js";
import Link from "next/link";
import * as GlobalState from "../GlobalState.res.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";
import * as $$Navigation from "next/navigation";
import * as JsxRuntime from "react/jsx-runtime";

function initial() {
  return "Loading";
}

var include = GlobalState.Make({
      initial: initial
    });

var useSync = include.useSync;

var update = include.update;

var initLoginCalled = {
  contents: false
};

async function initLogin() {
  if (initLoginCalled.contents) {
    return ;
  }
  initLoginCalled.contents = true;
  var code = new URLSearchParams(window.location.search).get("code");
  if (code == null) {
    return update("Error");
  }
  var res = await Actions.tryLogin(code);
  if (res.TAG !== "Ok") {
    return update("Error");
  }
  var res$1 = res._0;
  if (res$1.TAG === "Register") {
    return update({
                TAG: "Register",
                name: res$1.naverName,
                code: res$1.code
              });
  }
  Auth.update({
        TAG: "LoggedIn",
        _0: res$1._0
      });
  return update("Login");
}

function Pages_LoginCallback$default(props) {
  var from = Core__Option.getOr(Core__Option.filter(props.searchParams.state, (function (s) {
              return s.startsWith("/");
            })), "/");
  var login = useSync();
  React.useEffect((function () {
          initLogin();
        }), []);
  var router = $$Navigation.useRouter();
  React.useEffect((function () {
          if (typeof login !== "object") {
            if (login === "Login") {
              router.replace(from);
              update("Redirect");
            }
            
          } else {
            router.replace("/register?name=" + encodeURIComponent(login.name) + "&code=" + encodeURIComponent(login.code) + "&from=" + encodeURIComponent(from));
            update("Redirect");
          }
        }), [
        login,
        from,
        router
      ]);
  if (typeof login !== "object") {
    switch (login) {
      case "Loading" :
          return JsxRuntime.jsx("main", {
                      children: "로그인 중..."
                    });
      case "Error" :
          return JsxRuntime.jsxs("main", {
                      children: [
                        JsxRuntime.jsx("p", {
                              children: "로그인 중 오류가 발생했습니다"
                            }),
                        JsxRuntime.jsx("nav", {
                              children: JsxRuntime.jsxs("ul", {
                                    children: [
                                      JsxRuntime.jsx("li", {
                                            children: JsxRuntime.jsx(Link, {
                                                  href: "/login?from=" + encodeURIComponent(from),
                                                  children: "다시 로그인"
                                                })
                                          }),
                                      JsxRuntime.jsx("li", {
                                            children: JsxRuntime.jsx(Link, {
                                                  href: from,
                                                  children: "돌아가기"
                                                })
                                          })
                                    ]
                                  })
                            })
                      ]
                    });
      default:
        
    }
  }
  return JsxRuntime.jsx("main", {
              children: "리다이렉트 중..."
            });
}

var addHook = include.addHook;

var $$default = Pages_LoginCallback$default;

export {
  useSync ,
  update ,
  addHook ,
  initLoginCalled ,
  initLogin ,
  $$default as default,
}
/* include Not a pure module */
