'use server';
// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Db from "./Db.res.js";
import * as Env from "./Env.res.js";
import * as Jwt from "./lib/Jwt.res.js";
import * as Redis from "./lib/Redis.res.js";
import * as Utils from "./Utils.res.js";
import * as $$Crypto from "crypto";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Actions__sql from "./Actions__sql.res.js";
import * as $$Headers from "next/headers";
import * as Webapi__Fetch from "rescript-webapi/src/Webapi/Webapi__Fetch.res.js";

function getRefreshToken() {
  return Utils.$$Option.map($$Headers.cookies().get("refreshToken"), (function (cookie) {
                return cookie.value;
              }));
}

function setRefreshToken(refreshToken) {
  $$Headers.cookies().set("refreshToken", refreshToken, {
        path: "/",
        httpOnly: true,
        sameSite: "strict",
        maxAge: 604800
      });
}

async function login(profile) {
  var token = await Jwt.sign({
        id: profile.id
      }, Env.jwtSecret, {
        expiresIn: "1h"
      });
  return await Utils.Result.await_(Utils.Result.map(token, (async function (accessToken) {
                    var refreshToken = "refreshToken:" + $$Crypto.randomUUID();
                    var redis = await Db.getRedis();
                    await redis.set(refreshToken, profile.id, {
                          ex: 604800
                        });
                    setRefreshToken(refreshToken);
                    return {
                            accessToken: accessToken,
                            profile: profile
                          };
                  })));
}

async function refresh() {
  var refreshToken = getRefreshToken();
  var userId = await Utils.$$Option.await_(Utils.$$Option.map(refreshToken, (async function (refreshToken) {
                var redis = await Db.getRedis();
                return await Redis.getDel(redis, refreshToken);
              }))).then(Utils.$$Option.flatten);
  var profile = await Utils.$$Option.await_(Utils.$$Option.map(userId, (function (userId) {
                return Db.query(Actions__sql.GetUserById.one, {
                            id: userId
                          });
              }))).then(Utils.$$Option.flatten);
  return await Utils.$$Option.await_(Utils.$$Option.map(profile, (function (profile) {
                      return login(profile);
                    }))).then(Utils.$$Option.flattenResult);
}

async function tryLogin(code) {
  var getNaverAccessToken = async function () {
    var res = await fetch("https://nid.naver.com/oauth2.0/token", Webapi__Fetch.RequestInit.make("Post", {
              "Content-Type": "application/x-www-form-urlencoded"
            }, Caml_option.some(new URLSearchParams([
                        [
                          "grant_type",
                          "authorization_code"
                        ],
                        [
                          "code",
                          code
                        ],
                        [
                          "state",
                          "state"
                        ],
                        [
                          "client_id",
                          Env.naverClientId
                        ],
                        [
                          "client_secret",
                          Env.naverClientSecret
                        ]
                      ]).toString()), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined));
    var data = await res.json();
    return Utils.$$Option.mapOr(Utils.$$Option.flatMap(Utils.$$Option.flatMap(Js_json.decodeObject(data), (function (obj) {
                          return Js_dict.get(obj, "access_token");
                        })), Js_json.decodeString), {
                TAG: "Error",
                _0: "Unauthorized"
              }, (function (x) {
                  return {
                          TAG: "Ok",
                          _0: x
                        };
                }));
  };
  var getNaverProfile = async function (accessToken) {
    var data = await fetch("https://openapi.naver.com/v1/nid/me", Webapi__Fetch.RequestInit.make(undefined, {
                Authorization: "Bearer " + accessToken
              }, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)).then(function (prim) {
          return prim.json();
        });
    var response = Utils.$$Option.flatMap(Utils.$$Option.flatMap(Js_json.decodeObject(data), (function (obj) {
                return Js_dict.get(obj, "response");
              })), Js_json.decodeObject);
    var naverId = Utils.$$Option.flatMap(Utils.$$Option.flatMap(response, (function (obj) {
                return Js_dict.get(obj, "id");
              })), Js_json.decodeString);
    var naverName = Utils.$$Option.getOr(Utils.$$Option.flatMap(Utils.$$Option.flatMap(response, (function (obj) {
                    return Js_dict.get(obj, "nickname");
                  })), Js_json.decodeString), "");
    return Utils.$$Option.mapOr(naverId, {
                TAG: "Error",
                _0: "Unauthorized"
              }, (function (x) {
                  return {
                          TAG: "Ok",
                          _0: [
                            x,
                            naverName
                          ]
                        };
                }));
  };
  var loginOrRegister = async function (profile, naverId, naverName) {
    if (profile !== undefined) {
      var loginResult = await login(profile).then(Utils.Result.getExn);
      return {
              TAG: "Login",
              _0: loginResult
            };
    }
    var redis = await Db.getRedis();
    var registerCode = "registerCode:" + $$Crypto.randomUUID();
    console.log("set registerCode", registerCode);
    await redis.set(registerCode, naverId, {
          ex: 600
        });
    return {
            TAG: "Register",
            code: registerCode,
            naverName: naverName
          };
  };
  var accessToken = await getNaverAccessToken();
  var naverProfile = await Utils.Result.await_(Utils.Result.map(accessToken, getNaverProfile)).then(Utils.Result.flatten);
  return await Utils.Result.await_(Utils.Result.map(naverProfile, (async function (param) {
                    var naverId = param[0];
                    var profile = await Db.query(Actions__sql.GetUserByNaverId.one, {
                          naverId: naverId
                        });
                    return await loginOrRegister(profile, naverId, param[1]);
                  })));
}

export {
  refresh ,
  tryLogin ,
}
/* Db Not a pure module */
