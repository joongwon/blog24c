'use server';
// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Db from "./Db.res.js";
import * as Env from "./Env.res.js";
import * as Jwt from "./lib/Jwt.res.js";
import * as $$Crypto from "crypto";
import * as Actions__sql from "./Actions__sql.res.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";
import * as $$Headers from "next/headers";

function getRefreshToken() {
  return Core__Option.map($$Headers.cookies().get("refreshToken"), (function (cookie) {
                return cookie.value;
              }));
}

function setRefreshToken(refreshToken) {
  $$Headers.cookies().set("refreshToken", refreshToken, {
        path: "/",
        httpOnly: true,
        sameSite: "strict",
        maxAge: 604800
      });
}

async function login(userId) {
  var profile = await Db.query(Actions__sql.Query1.one, {
        id: userId
      });
  if (profile.TAG === "Ok") {
    var profile$1 = profile._0;
    if (profile$1 === undefined) {
      return {
              TAG: "Error",
              _0: "User not found"
            };
    }
    var err = await Jwt.sign({
          id: userId
        }, Env.jwtSecret, {
          expiresIn: "1h"
        });
    if (err.TAG === "Ok") {
      var refreshToken = "refreshToken:" + $$Crypto.randomUUID();
      var redis = await Db.getRedis();
      await redis.set(refreshToken, userId, {
            ex: 604800
          });
      setRefreshToken(refreshToken);
      return {
              TAG: "Ok",
              _0: {
                accessToken: err._0,
                profile: {
                  id: profile$1.id,
                  name: profile$1.name,
                  role: profile$1.role
                }
              }
            };
    }
    console.log(err._0);
    return {
            TAG: "Error",
            _0: "Failed to sign token"
          };
  }
  console.log(profile._0);
  return {
          TAG: "Error",
          _0: "Failed to fetch user profile"
        };
}

async function refresh() {
  var refreshToken = getRefreshToken();
  if (refreshToken === undefined) {
    return ;
  }
  var redis = await Db.getRedis();
  var userId = await redis.getDel("refreshToken:" + refreshToken);
  if (userId === undefined) {
    return ;
  }
  var res = await login(userId);
  if (res.TAG === "Ok") {
    return res._0;
  }
  console.log(res._0);
}

export {
  getRefreshToken ,
  setRefreshToken ,
  login ,
  refresh ,
}
/* Db Not a pure module */
