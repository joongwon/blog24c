'use client'
// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";
import * as ReactMarkdown from "react-markdown";
import ReactMarkdown$1 from "react-markdown";
import * as JsxRuntime from "react/jsx-runtime";

function Components_ArticleViewer$Markdown(props) {
  var files = props.files;
  var urlTransform = function (url) {
    if (!url.startsWith("./")) {
      return ReactMarkdown.defaultUrlTransform(url);
    }
    var fileName = decodeURI(url.slice(2));
    return Core__Option.mapOr(files.find(function (file) {
                    return file.name === fileName;
                  }), "", (function (file) {
                  return file.id.toString() + "/" + file.name.normalize();
                }));
  };
  return JsxRuntime.jsx(ReactMarkdown$1, {
              children: props.children,
              urlTransform: urlTransform
            });
}

var Markdown = {
  make: Components_ArticleViewer$Markdown
};

function Components_ArticleViewer$Text(props) {
  return JsxRuntime.jsx("p", {
              children: props.children.split("\n").flatMap(function (line, j) {
                    return [
                            line,
                            JsxRuntime.jsx("br", {}, j.toString())
                          ];
                  })
            });
}

var $$Text = {
  make: Components_ArticleViewer$Text
};

function estimateType(content) {
  var pat = /^([>*-] |#|```|!\[)|\]\(/m;
  if (pat.test(content)) {
    return "Markdown";
  } else {
    return "Text";
  }
}

function Components_ArticleViewer$ContentTypeOption(props) {
  var optionValue = props.optionValue;
  var setContentType = props.setContentType;
  return JsxRuntime.jsx("button", {
              children: optionValue,
              className: (
                props.contentType === optionValue ? "bg-neutral-200 " : "bg-white "
              ) + "px-2 py-2 text-xs first:rounded-l-xl last:rounded-r-xl border border-neutral-300 hover:bg-neutral-300",
              onClick: (function (param) {
                  setContentType(function (param) {
                        return optionValue;
                      });
                })
            });
}

var ContentTypeOption = {
  make: Components_ArticleViewer$ContentTypeOption
};

function Components_ArticleViewer(props) {
  var fileSuffix = props.fileSuffix;
  var files = props.files;
  var article = props.article;
  var match = React.useState(function () {
        return estimateType(article.content);
      });
  var setContentType = match[1];
  var contentType = match[0];
  return JsxRuntime.jsxs("article", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx(Components_ArticleViewer$ContentTypeOption, {
                              contentType: contentType,
                              setContentType: setContentType,
                              optionValue: "Markdown"
                            }),
                        JsxRuntime.jsx(Components_ArticleViewer$ContentTypeOption, {
                              contentType: contentType,
                              setContentType: setContentType,
                              optionValue: "Text"
                            })
                      ],
                      className: "flex justify-end"
                    }),
                contentType === "Text" ? JsxRuntime.jsx(Components_ArticleViewer$Text, {
                        children: article.content
                      }) : JsxRuntime.jsx(Components_ArticleViewer$Markdown, {
                        children: article.content,
                        files: files
                      }),
                files.length > 0 ? JsxRuntime.jsxs("details", {
                        children: [
                          JsxRuntime.jsx("summary", {
                                children: "첨부파일"
                              }),
                          JsxRuntime.jsx("ul", {
                                children: files.map(function (file) {
                                      return JsxRuntime.jsx("li", {
                                                  children: JsxRuntime.jsx("a", {
                                                        children: file.name,
                                                        href: fileSuffix + "/" + file.id.toString() + "/" + file.name
                                                      })
                                                }, file.id.toString());
                                    })
                              })
                        ]
                      }) : null
              ]
            });
}

var make = Components_ArticleViewer;

export {
  Markdown ,
  $$Text ,
  estimateType ,
  ContentTypeOption ,
  make ,
}
/* react Not a pure module */
